name: Lint

on:
  push:
    branches: [ main ]
  pull_request:


jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ['3.8.6', '3.9.0']
    
    env:
      PIP_CACHE_DIR: /tmp/pip-cache-dir

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      
      # This step caches our Python dependencies. To make sure we
      # only restore a cache when the dependencies, the python version and
      # the runner operating system we create a cache key 
      # that is a composite of those states.
      # Only when the context is exactly the same, we will restore the cache.
      - name: Restore pip cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "python-0-${{ runner.os }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./pyproject.toml') }}"
      
      # Install flit, and the package and its dev dependencies on the system interpreter. 
      - name: Install dev requirements
        run: |
          pip install flit
          flit install --deps develop --env
      
      # Run flake8 and have it format the linting errors in the format of
      # the GitHub Workflow command to register error annotations. This
      # means that our flake8 output is automatically added as an error
      # annotation to both the run result and in the "Files" tab of a
      # pull request.
      #
      # Format used:
      # ::error file={filename},line={line},col={col}::{message}
      - name: Run flake8
        run: "flake8 \
        --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'"
      
      - name: Run Black
        run: black --check .
